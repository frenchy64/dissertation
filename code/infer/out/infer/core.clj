(ns infer.core
  (:use clojure.test))

;; Automatically added requires by core.typed
(require '[clojure.core.typed :as t])
;; Start: Generated by clojure.core.typed - DO NOT EDIT
(declare Op)
(t/defalias
  Op
  (t/U '{:op ':leaf, :val t/Int} '{:op ':node, :left Op, :right Op}))
(t/ann nodes [Op :-> t/Int])
(t/ann visit-leaf [[Op :-> t/Any] Op :-> t/Any])
;; End: Generated by clojure.core.typed - DO NOT EDIT
(defn nodes "Returns the number of nodes in the tree t."
  [t] (case (:op t)
        :node (+ 1 (nodes (:left t)) (nodes (:right t)))
        :leaf 1))
(defn visit-leaf "Updates :leaf nodes in tree t with function f."
  [f t] (case (:op t)
          :node (assoc t :left (visit-leaf f (:left t))
                         :right (visit-leaf f (:right t)))
          :leaf (f t)))